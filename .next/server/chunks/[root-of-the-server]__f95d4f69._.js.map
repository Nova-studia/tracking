{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///home/nova/apps/tracking/src/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI;\n\nif (!MONGODB_URI) {\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\n}\n\nlet cached = (global as { mongoose?: { conn: null | typeof mongoose; promise: null | Promise<typeof mongoose> } }).mongoose;\n\nif (!cached) {\n  cached = (global as { mongoose?: { conn: null | typeof mongoose; promise: null | Promise<typeof mongoose> } }).mongoose = { conn: null, promise: null };\n}\n\nasync function connectDB() {\n  // If already connected, return cached connection\n  if (cached?.conn) {\n    console.log('🔄 Using cached MongoDB connection');\n    return cached.conn;\n  }\n\n  // If no promise exists, create one\n  if (!cached?.promise) {\n    console.log('🔌 Connecting to MongoDB...');\n    console.log('🌍 Environment:', process.env.NODE_ENV);\n    console.log('🔗 MongoDB URI:', MONGODB_URI?.replace(/\\/\\/.*@/, '//***:***@')); // Hide credentials in logs\n    \n    const opts = {\n      bufferCommands: false,\n      maxPoolSize: 10,\n      serverSelectionTimeoutMS: 5000,\n      socketTimeoutMS: 45000,\n    };\n\n    if (cached) {\n      cached.promise = mongoose.connect(MONGODB_URI!, opts).then((mongoose) => {\n        console.log('✅ MongoDB connected successfully');\n        console.log('📊 Database name:', mongoose.connection.name);\n        return mongoose;\n      });\n    }\n  }\n\n  try {\n    if (cached) {\n      cached.conn = await cached.promise;\n    }\n  } catch (e) {\n    console.error('❌ MongoDB connection failed:', e);\n    if (cached) {\n      cached.promise = null;\n    }\n    throw e;\n  }\n\n  return cached?.conn;\n}\n\n// Handle connection events\nmongoose.connection.on('connected', () => {\n  console.log('🟢 Mongoose connected to MongoDB');\n});\n\nmongoose.connection.on('error', (err) => {\n  console.error('🔴 Mongoose connection error:', err);\n});\n\nmongoose.connection.on('disconnected', () => {\n  console.log('🟡 Mongoose disconnected from MongoDB');\n});\n\nexport default connectDB;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI,SAAS,4CAAsG,QAAQ;AAE3H,IAAI,CAAC,QAAQ;IACX,SAAS,4CAAsG,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACxJ;AAEA,eAAe;IACb,iDAAiD;IACjD,IAAI,QAAQ,MAAM;QAChB,QAAQ,GAAG,CAAC;QACZ,OAAO,OAAO,IAAI;IACpB;IAEA,mCAAmC;IACnC,IAAI,CAAC,QAAQ,SAAS;QACpB,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC,mBAAmB,aAAa,QAAQ,WAAW,gBAAgB,2BAA2B;QAE1G,MAAM,OAAO;YACX,gBAAgB;YAChB,aAAa;YACb,0BAA0B;YAC1B,iBAAiB;QACnB;QAEA,IAAI,QAAQ;YACV,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAc,MAAM,IAAI,CAAC,CAAC;gBAC1D,QAAQ,GAAG,CAAC;gBACZ,QAAQ,GAAG,CAAC,qBAAqB,SAAS,UAAU,CAAC,IAAI;gBACzD,OAAO;YACT;QACF;IACF;IAEA,IAAI;QACF,IAAI,QAAQ;YACV,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;QACpC;IACF,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,IAAI,QAAQ;YACV,OAAO,OAAO,GAAG;QACnB;QACA,MAAM;IACR;IAEA,OAAO,QAAQ;AACjB;AAEA,2BAA2B;AAC3B,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,aAAa;IAClC,QAAQ,GAAG,CAAC;AACd;AAEA,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,SAAS,CAAC;IAC/B,QAAQ,KAAK,CAAC,iCAAiC;AACjD;AAEA,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,gBAAgB;IACrC,QAAQ,GAAG,CAAC;AACd;uCAEe","debugId":null}},
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///home/nova/apps/tracking/src/models/Contract.ts"],"sourcesContent":["import mongoose, { Schema, Document } from 'mongoose';\n\nexport interface IContract extends Document {\n  phone_number: string;\n  lot_number: string;\n  full_name: string;\n  address: string;\n  gatepass: string;\n  signature_data: string;\n  owner_name: string;\n  owner_phone: string;\n  timestamp: Date;\n  ip_address?: string;\n}\n\nconst ContractSchema: Schema = new Schema({\n  phone_number: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  lot_number: {\n    type: String,\n    required: true,\n    length: 8,\n    uppercase: true,\n    trim: true\n  },\n  full_name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  address: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  gatepass: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 6,\n    uppercase: true,\n    validate: {\n      validator: function(v: string) {\n        return /^[A-Z0-9]*$/.test(v);\n      },\n      message: 'Gatepass solo puede contener letras y números'\n    }\n  },\n  signature_data: {\n    type: String,\n    required: true\n  },\n  owner_name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  owner_phone: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  timestamp: {\n    type: Date,\n    default: Date.now\n  },\n  ip_address: {\n    type: String,\n    required: false\n  }\n});\n\n// Create indexes for better query performance\nContractSchema.index({ timestamp: -1 });\nContractSchema.index({ phone_number: 1 });\nContractSchema.index({ lot_number: 1 }, { unique: true });\n\nexport default mongoose.models.Contract || mongoose.model<IContract>('Contract', ContractSchema);"],"names":[],"mappings":";;;AAAA;;AAeA,MAAM,iBAAyB,IAAI,yGAAA,CAAA,SAAM,CAAC;IACxC,cAAc;QACZ,MAAM;QACN,UAAU;QACV,MAAM;IACR;IACA,YAAY;QACV,MAAM;QACN,UAAU;QACV,QAAQ;QACR,WAAW;QACX,MAAM;IACR;IACA,WAAW;QACT,MAAM;QACN,UAAU;QACV,MAAM;IACR;IACA,SAAS;QACP,MAAM;QACN,UAAU;QACV,MAAM;IACR;IACA,UAAU;QACR,MAAM;QACN,UAAU;QACV,MAAM;QACN,WAAW;QACX,WAAW;QACX,UAAU;YACR,WAAW,SAAS,CAAS;gBAC3B,OAAO,cAAc,IAAI,CAAC;YAC5B;YACA,SAAS;QACX;IACF;IACA,gBAAgB;QACd,MAAM;QACN,UAAU;IACZ;IACA,YAAY;QACV,MAAM;QACN,UAAU;QACV,MAAM;IACR;IACA,aAAa;QACX,MAAM;QACN,UAAU;QACV,MAAM;IACR;IACA,WAAW;QACT,MAAM;QACN,SAAS,KAAK,GAAG;IACnB;IACA,YAAY;QACV,MAAM;QACN,UAAU;IACZ;AACF;AAEA,8CAA8C;AAC9C,eAAe,KAAK,CAAC;IAAE,WAAW,CAAC;AAAE;AACrC,eAAe,KAAK,CAAC;IAAE,cAAc;AAAE;AACvC,eAAe,KAAK,CAAC;IAAE,YAAY;AAAE,GAAG;IAAE,QAAQ;AAAK;uCAExC,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,QAAQ,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAY,YAAY","debugId":null}},
    {"offset": {"line": 224, "column": 0}, "map": {"version":3,"sources":["file:///home/nova/apps/tracking/src/app/api/user/%5Bphone%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport connectDB from '@/lib/mongodb';\nimport Contract from '@/models/Contract';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ phone: string }> }\n) {\n  try {\n    await connectDB();\n    \n    const { phone } = await params;\n    const phoneNumber = decodeURIComponent(phone);\n    \n    // Get user with all contracts\n    const userAggregation = await Contract.aggregate([\n      {\n        $match: { phone_number: phoneNumber }\n      },\n      {\n        $group: {\n          _id: \"$phone_number\",\n          full_name: { $first: \"$full_name\" },\n          address: { $first: \"$address\" },\n          gatepass: { $first: \"$gatepass\" },\n          owner_name: { $first: \"$owner_name\" },\n          owner_phone: { $first: \"$owner_phone\" },\n          contracts: {\n            $push: {\n              _id: \"$_id\",\n              lot_number: \"$lot_number\",\n              signature_data: \"$signature_data\",\n              timestamp: \"$timestamp\",\n              ip_address: \"$ip_address\"\n            }\n          },\n          contract_count: { $sum: 1 },\n          first_contract: { $min: \"$timestamp\" },\n          last_contract: { $max: \"$timestamp\" }\n        }\n      },\n      {\n        $project: {\n          _id: 0,\n          phone_number: \"$_id\",\n          full_name: 1,\n          address: 1,\n          gatepass: 1,\n          owner_name: 1,\n          owner_phone: 1,\n          contracts: 1,\n          contract_count: 1,\n          first_contract: 1,\n          last_contract: 1\n        }\n      }\n    ]);\n\n    if (!userAggregation || userAggregation.length === 0) {\n      return NextResponse.json(\n        { success: false, error: 'Usuario no encontrado' },\n        { status: 404 }\n      );\n    }\n\n    const user = userAggregation[0];\n    \n    // Sort contracts by timestamp (newest first)\n    user.contracts.sort((a: { timestamp: string }, b: { timestamp: string }) => \n      new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n    );\n\n    return NextResponse.json({\n      success: true,\n      user\n    });\n    \n  } catch (error) {\n    console.error('Error fetching user details:', error);\n    return NextResponse.json(\n      { success: false, error: 'Error procesando la solicitud' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAA0C;IAElD,IAAI;QACF,MAAM,CAAA,GAAA,uHAAA,CAAA,UAAS,AAAD;QAEd,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM;QACxB,MAAM,cAAc,mBAAmB;QAEvC,8BAA8B;QAC9B,MAAM,kBAAkB,MAAM,2HAAA,CAAA,UAAQ,CAAC,SAAS,CAAC;YAC/C;gBACE,QAAQ;oBAAE,cAAc;gBAAY;YACtC;YACA;gBACE,QAAQ;oBACN,KAAK;oBACL,WAAW;wBAAE,QAAQ;oBAAa;oBAClC,SAAS;wBAAE,QAAQ;oBAAW;oBAC9B,UAAU;wBAAE,QAAQ;oBAAY;oBAChC,YAAY;wBAAE,QAAQ;oBAAc;oBACpC,aAAa;wBAAE,QAAQ;oBAAe;oBACtC,WAAW;wBACT,OAAO;4BACL,KAAK;4BACL,YAAY;4BACZ,gBAAgB;4BAChB,WAAW;4BACX,YAAY;wBACd;oBACF;oBACA,gBAAgB;wBAAE,MAAM;oBAAE;oBAC1B,gBAAgB;wBAAE,MAAM;oBAAa;oBACrC,eAAe;wBAAE,MAAM;oBAAa;gBACtC;YACF;YACA;gBACE,UAAU;oBACR,KAAK;oBACL,cAAc;oBACd,WAAW;oBACX,SAAS;oBACT,UAAU;oBACV,YAAY;oBACZ,aAAa;oBACb,WAAW;oBACX,gBAAgB;oBAChB,gBAAgB;oBAChB,eAAe;gBACjB;YACF;SACD;QAED,IAAI,CAAC,mBAAmB,gBAAgB,MAAM,KAAK,GAAG;YACpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAwB,GACjD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAAO,eAAe,CAAC,EAAE;QAE/B,6CAA6C;QAC7C,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC,GAA0B,IAC7C,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO;QAGjE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAAgC,GACzD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}