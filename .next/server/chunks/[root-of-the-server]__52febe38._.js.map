{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///home/nova/apps/tracking/src/app/api/db-discover/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport mongoose from 'mongoose';\n\nexport async function GET() {\n  try {\n    console.log('üîç Discovering all databases in cluster...');\n    \n    const baseUri = process.env.MONGODB_URI?.replace(/\\/[^\\/]*\\?/, '/?') || '';\n    console.log('üîó Connecting to admin database...');\n    \n    const connection = await mongoose.createConnection(baseUri);\n    const admin = connection.db.admin();\n    \n    // List all databases\n    const { databases } = await admin.listDatabases();\n    console.log(`üìä Found ${databases.length} databases`);\n    \n    const results = [];\n    const targetLots = ['98879846', 'JDIDBFJF', '65654654'];\n    \n    for (const dbInfo of databases) {\n      try {\n        console.log(`üîç Checking database: ${dbInfo.name}`);\n        const db = connection.useDb(dbInfo.name);\n        \n        // List collections in this database\n        const collections = await db.listCollections().toArray();\n        const dbResult = {\n          name: dbInfo.name,\n          sizeOnDisk: dbInfo.sizeOnDisk,\n          collections: []\n        };\n        \n        for (const colInfo of collections) {\n          try {\n            const collection = db.collection(colInfo.name);\n            const count = await collection.countDocuments();\n            \n            let hasTargetLots = false;\n            let sampleDocs = [];\n            \n            if (count > 0) {\n              // Check if this collection has our target lots\n              const targetCheck = await collection.find({\n                lot_number: { $in: targetLots }\n              }).limit(3).toArray();\n              \n              hasTargetLots = targetCheck.length > 0;\n              \n              // Get sample documents\n              sampleDocs = await collection.find({})\n                .project({ lot_number: 1, full_name: 1, timestamp: 1, _id: 0 })\n                .sort({ timestamp: -1 })\n                .limit(5)\n                .toArray();\n            }\n            \n            (dbResult.collections as any[]).push({\n              name: colInfo.name,\n              count,\n              hasTargetLots,\n              sampleDocs\n            });\n            \n            if (hasTargetLots) {\n              console.log(`üéØ FOUND TARGET LOTS in ${dbInfo.name}.${colInfo.name}!`);\n            }\n            \n          } catch (colError) {\n            console.log(`‚ùå Error checking collection ${colInfo.name}:`, colError);\n          }\n        }\n        \n        results.push(dbResult);\n        \n      } catch (dbError) {\n        console.log(`‚ùå Error checking database ${dbInfo.name}:`, dbError);\n        results.push({\n          name: dbInfo.name,\n          error: dbError instanceof Error ? dbError.message : 'Unknown error'\n        });\n      }\n    }\n    \n    await connection.close();\n    \n    return NextResponse.json({\n      success: true,\n      targetLots,\n      totalDatabases: databases.length,\n      results: results.filter(r => !('error' in r) && (r as any).collections.length > 0)\n    });\n    \n  } catch (error) {\n    console.error('‚ùå Discovery failed:', error);\n    return NextResponse.json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}