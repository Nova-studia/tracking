{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///home/nova/apps/tracking/src/lib/mongodb.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI;\n\nif (!MONGODB_URI) {\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\n}\n\nlet cached = (global as { mongoose?: { conn: null | typeof mongoose; promise: null | Promise<typeof mongoose> } }).mongoose;\n\nif (!cached) {\n  cached = (global as { mongoose?: { conn: null | typeof mongoose; promise: null | Promise<typeof mongoose> } }).mongoose = { conn: null, promise: null };\n}\n\nasync function connectDB() {\n  // If already connected, return cached connection\n  if (cached?.conn) {\n    console.log('üîÑ Using cached MongoDB connection');\n    return cached.conn;\n  }\n\n  // If no promise exists, create one\n  if (!cached?.promise) {\n    console.log('üîå Connecting to MongoDB...');\n    console.log('üåç Environment:', process.env.NODE_ENV);\n    console.log('üîó MongoDB URI:', MONGODB_URI?.replace(/\\/\\/.*@/, '//***:***@')); // Hide credentials in logs\n    \n    const opts = {\n      bufferCommands: false,\n      maxPoolSize: 10,\n      serverSelectionTimeoutMS: 5000,\n      socketTimeoutMS: 45000,\n    };\n\n    if (cached) {\n      cached.promise = mongoose.connect(MONGODB_URI!, opts).then((mongoose) => {\n        console.log('‚úÖ MongoDB connected successfully');\n        console.log('üìä Database name:', mongoose.connection.name);\n        return mongoose;\n      });\n    }\n  }\n\n  try {\n    if (cached) {\n      cached.conn = await cached.promise;\n    }\n  } catch (e) {\n    console.error('‚ùå MongoDB connection failed:', e);\n    if (cached) {\n      cached.promise = null;\n    }\n    throw e;\n  }\n\n  return cached?.conn;\n}\n\n// Handle connection events\nmongoose.connection.on('connected', () => {\n  console.log('üü¢ Mongoose connected to MongoDB');\n});\n\nmongoose.connection.on('error', (err) => {\n  console.error('üî¥ Mongoose connection error:', err);\n});\n\nmongoose.connection.on('disconnected', () => {\n  console.log('üü° Mongoose disconnected from MongoDB');\n});\n\nexport default connectDB;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI,SAAS,4CAAsG,QAAQ;AAE3H,IAAI,CAAC,QAAQ;IACX,SAAS,4CAAsG,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACxJ;AAEA,eAAe;IACb,iDAAiD;IACjD,IAAI,QAAQ,MAAM;QAChB,QAAQ,GAAG,CAAC;QACZ,OAAO,OAAO,IAAI;IACpB;IAEA,mCAAmC;IACnC,IAAI,CAAC,QAAQ,SAAS;QACpB,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC,mBAAmB,aAAa,QAAQ,WAAW,gBAAgB,2BAA2B;QAE1G,MAAM,OAAO;YACX,gBAAgB;YAChB,aAAa;YACb,0BAA0B;YAC1B,iBAAiB;QACnB;QAEA,IAAI,QAAQ;YACV,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAc,MAAM,IAAI,CAAC,CAAC;gBAC1D,QAAQ,GAAG,CAAC;gBACZ,QAAQ,GAAG,CAAC,qBAAqB,SAAS,UAAU,CAAC,IAAI;gBACzD,OAAO;YACT;QACF;IACF;IAEA,IAAI;QACF,IAAI,QAAQ;YACV,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;QACpC;IACF,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,IAAI,QAAQ;YACV,OAAO,OAAO,GAAG;QACnB;QACA,MAAM;IACR;IAEA,OAAO,QAAQ;AACjB;AAEA,2BAA2B;AAC3B,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,aAAa;IAClC,QAAQ,GAAG,CAAC;AACd;AAEA,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,SAAS,CAAC;IAC/B,QAAQ,KAAK,CAAC,iCAAiC;AACjD;AAEA,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,gBAAgB;IACrC,QAAQ,GAAG,CAAC;AACd;uCAEe","debugId":null}},
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///home/nova/apps/tracking/src/models/Contract.ts"],"sourcesContent":["import mongoose, { Schema, Document } from 'mongoose';\n\nexport interface IContract extends Document {\n  phone_number: string;\n  lot_number: string;\n  full_name: string;\n  address: string;\n  signature_data: string;\n  timestamp: Date;\n  ip_address?: string;\n}\n\nconst ContractSchema: Schema = new Schema({\n  phone_number: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  lot_number: {\n    type: String,\n    required: true,\n    length: 8,\n    uppercase: true,\n    trim: true\n  },\n  full_name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  address: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  signature_data: {\n    type: String,\n    required: true\n  },\n  timestamp: {\n    type: Date,\n    default: Date.now\n  },\n  ip_address: {\n    type: String,\n    required: false\n  }\n});\n\n// Create indexes for better query performance\nContractSchema.index({ timestamp: -1 });\nContractSchema.index({ phone_number: 1 });\nContractSchema.index({ lot_number: 1 }, { unique: true });\n\nexport default mongoose.models.Contract || mongoose.model<IContract>('Contract', ContractSchema);"],"names":[],"mappings":";;;AAAA;;AAYA,MAAM,iBAAyB,IAAI,yGAAA,CAAA,SAAM,CAAC;IACxC,cAAc;QACZ,MAAM;QACN,UAAU;QACV,MAAM;IACR;IACA,YAAY;QACV,MAAM;QACN,UAAU;QACV,QAAQ;QACR,WAAW;QACX,MAAM;IACR;IACA,WAAW;QACT,MAAM;QACN,UAAU;QACV,MAAM;IACR;IACA,SAAS;QACP,MAAM;QACN,UAAU;QACV,MAAM;IACR;IACA,gBAAgB;QACd,MAAM;QACN,UAAU;IACZ;IACA,WAAW;QACT,MAAM;QACN,SAAS,KAAK,GAAG;IACnB;IACA,YAAY;QACV,MAAM;QACN,UAAU;IACZ;AACF;AAEA,8CAA8C;AAC9C,eAAe,KAAK,CAAC;IAAE,WAAW,CAAC;AAAE;AACrC,eAAe,KAAK,CAAC;IAAE,cAAc;AAAE;AACvC,eAAe,KAAK,CAAC;IAAE,YAAY;AAAE,GAAG;IAAE,QAAQ;AAAK;uCAExC,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,QAAQ,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAY,YAAY","debugId":null}},
    {"offset": {"line": 201, "column": 0}, "map": {"version":3,"sources":["file:///home/nova/apps/tracking/src/app/api/db-test/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport connectDB from '@/lib/mongodb';\nimport Contract from '@/models/Contract';\n\nexport async function GET() {\n  try {\n    console.log('üß™ DB Test endpoint called');\n    \n    // Test connection\n    const connection = await connectDB();\n    console.log('‚úÖ Connection established');\n    \n    // Get database stats\n    const totalContracts = await Contract.countDocuments();\n    const recentContracts = await Contract.find()\n      .select('_id phone_number lot_number full_name timestamp')\n      .sort({ timestamp: -1 })\n      .limit(5)\n      .lean();\n    \n    // Get database info\n    const dbName = connection?.connection?.name || 'unknown';\n    const readyState = connection?.connection?.readyState || 0;\n    \n    const readyStateMap: Record<number, string> = {\n      0: 'disconnected',\n      1: 'connected',\n      2: 'connecting',\n      3: 'disconnecting'\n    };\n    \n    const readyStateText = readyStateMap[readyState] || 'unknown';\n    \n    return NextResponse.json({\n      success: true,\n      environment: process.env.NODE_ENV || 'development',\n      database: {\n        name: dbName,\n        readyState: readyState,\n        readyStateText: readyStateText,\n        uri: process.env.MONGODB_URI?.replace(/\\/\\/.*@/, '//***:***@') || 'Not set'\n      },\n      stats: {\n        totalContracts,\n        recentContracts: recentContracts.map(contract => ({\n          id: (contract._id as { toString: () => string }).toString(),\n          phone_number: contract.phone_number,\n          lot_number: contract.lot_number,\n          full_name: contract.full_name,\n          timestamp: contract.timestamp\n        }))\n      },\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('‚ùå DB Test failed:', error);\n    return NextResponse.json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      environment: process.env.NODE_ENV || 'development',\n      uri: process.env.MONGODB_URI?.replace(/\\/\\/.*@/, '//***:***@') || 'Not set',\n      timestamp: new Date().toISOString()\n    }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,kBAAkB;QAClB,MAAM,aAAa,MAAM,CAAA,GAAA,uHAAA,CAAA,UAAS,AAAD;QACjC,QAAQ,GAAG,CAAC;QAEZ,qBAAqB;QACrB,MAAM,iBAAiB,MAAM,2HAAA,CAAA,UAAQ,CAAC,cAAc;QACpD,MAAM,kBAAkB,MAAM,2HAAA,CAAA,UAAQ,CAAC,IAAI,GACxC,MAAM,CAAC,mDACP,IAAI,CAAC;YAAE,WAAW,CAAC;QAAE,GACrB,KAAK,CAAC,GACN,IAAI;QAEP,oBAAoB;QACpB,MAAM,SAAS,YAAY,YAAY,QAAQ;QAC/C,MAAM,aAAa,YAAY,YAAY,cAAc;QAEzD,MAAM,gBAAwC;YAC5C,GAAG;YACH,GAAG;YACH,GAAG;YACH,GAAG;QACL;QAEA,MAAM,iBAAiB,aAAa,CAAC,WAAW,IAAI;QAEpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,aAAa,mDAAwB;YACrC,UAAU;gBACR,MAAM;gBACN,YAAY;gBACZ,gBAAgB;gBAChB,KAAK,QAAQ,GAAG,CAAC,WAAW,EAAE,QAAQ,WAAW,iBAAiB;YACpE;YACA,OAAO;gBACL;gBACA,iBAAiB,gBAAgB,GAAG,CAAC,CAAA,WAAY,CAAC;wBAChD,IAAI,AAAC,SAAS,GAAG,CAAgC,QAAQ;wBACzD,cAAc,SAAS,YAAY;wBACnC,YAAY,SAAS,UAAU;wBAC/B,WAAW,SAAS,SAAS;wBAC7B,WAAW,SAAS,SAAS;oBAC/B,CAAC;YACH;YACA,WAAW,IAAI,OAAO,WAAW;QACnC;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAChD,aAAa,mDAAwB;YACrC,KAAK,QAAQ,GAAG,CAAC,WAAW,EAAE,QAAQ,WAAW,iBAAiB;YAClE,WAAW,IAAI,OAAO,WAAW;QACnC,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}