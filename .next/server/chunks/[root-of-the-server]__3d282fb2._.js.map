{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///home/nova/apps/tracking/src/app/api/db-migrate/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport mongoose from 'mongoose';\n\nexport async function POST() {\n  try {\n    console.log('üîÑ Starting database migration...');\n    \n    // Connect to test database\n    const testUri = process.env.MONGODB_URI?.replace('/jmtracking?', '/test?') || '';\n    const prodUri = process.env.MONGODB_URI || '';\n    \n    console.log('üìä Connecting to test database...');\n    const testConnection = await mongoose.createConnection(testUri);\n    \n    console.log('üìä Connecting to jmtracking database...');\n    const prodConnection = await mongoose.createConnection(prodUri);\n    \n    // Define contract schema for both connections\n    const contractSchema = new mongoose.Schema({\n      phone_number: String,\n      lot_number: String,\n      full_name: String,\n      address: String,\n      signature_data: String,\n      timestamp: Date,\n      ip_address: String\n    });\n    \n    const TestContract = testConnection.model('Contract', contractSchema);\n    const ProdContract = prodConnection.model('Contract', contractSchema);\n    \n    // Get all contracts from test database\n    const testContracts = await TestContract.find({}).lean();\n    console.log(`üìã Found ${testContracts.length} contracts in test database`);\n    \n    // Get existing contracts in production database\n    const existingLots = await ProdContract.find({}, { lot_number: 1 }).lean();\n    const existingLotNumbers = new Set(existingLots.map(c => c.lot_number));\n    \n    // Filter out contracts that already exist in production\n    const contractsToMigrate = testContracts.filter(contract => \n      !existingLotNumbers.has(contract.lot_number)\n    );\n    \n    console.log(`üì¶ Migrating ${contractsToMigrate.length} new contracts...`);\n    \n    if (contractsToMigrate.length > 0) {\n      // Insert contracts to production database\n      await ProdContract.insertMany(contractsToMigrate);\n      console.log('‚úÖ Migration completed successfully');\n    } else {\n      console.log('‚ÑπÔ∏è No new contracts to migrate');\n    }\n    \n    // Get final counts\n    const testCount = await TestContract.countDocuments();\n    const prodCount = await ProdContract.countDocuments();\n    \n    // Close connections\n    await testConnection.close();\n    await prodConnection.close();\n    \n    return NextResponse.json({\n      success: true,\n      message: 'Migration completed',\n      stats: {\n        testDatabase: testCount,\n        prodDatabase: prodCount,\n        migrated: contractsToMigrate.length\n      }\n    });\n    \n  } catch (error) {\n    console.error('‚ùå Migration failed:', error);\n    return NextResponse.json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,2BAA2B;QAC3B,MAAM,UAAU,QAAQ,GAAG,CAAC,WAAW,EAAE,QAAQ,gBAAgB,aAAa;QAC9E,MAAM,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;QAE3C,QAAQ,GAAG,CAAC;QACZ,MAAM,iBAAiB,MAAM,yGAAA,CAAA,UAAQ,CAAC,gBAAgB,CAAC;QAEvD,QAAQ,GAAG,CAAC;QACZ,MAAM,iBAAiB,MAAM,yGAAA,CAAA,UAAQ,CAAC,gBAAgB,CAAC;QAEvD,8CAA8C;QAC9C,MAAM,iBAAiB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;YACzC,cAAc;YACd,YAAY;YACZ,WAAW;YACX,SAAS;YACT,gBAAgB;YAChB,WAAW;YACX,YAAY;QACd;QAEA,MAAM,eAAe,eAAe,KAAK,CAAC,YAAY;QACtD,MAAM,eAAe,eAAe,KAAK,CAAC,YAAY;QAEtD,uCAAuC;QACvC,MAAM,gBAAgB,MAAM,aAAa,IAAI,CAAC,CAAC,GAAG,IAAI;QACtD,QAAQ,GAAG,CAAC,CAAC,SAAS,EAAE,cAAc,MAAM,CAAC,2BAA2B,CAAC;QAEzE,gDAAgD;QAChD,MAAM,eAAe,MAAM,aAAa,IAAI,CAAC,CAAC,GAAG;YAAE,YAAY;QAAE,GAAG,IAAI;QACxE,MAAM,qBAAqB,IAAI,IAAI,aAAa,GAAG,CAAC,CAAA,IAAK,EAAE,UAAU;QAErE,wDAAwD;QACxD,MAAM,qBAAqB,cAAc,MAAM,CAAC,CAAA,WAC9C,CAAC,mBAAmB,GAAG,CAAC,SAAS,UAAU;QAG7C,QAAQ,GAAG,CAAC,CAAC,aAAa,EAAE,mBAAmB,MAAM,CAAC,iBAAiB,CAAC;QAExE,IAAI,mBAAmB,MAAM,GAAG,GAAG;YACjC,0CAA0C;YAC1C,MAAM,aAAa,UAAU,CAAC;YAC9B,QAAQ,GAAG,CAAC;QACd,OAAO;YACL,QAAQ,GAAG,CAAC;QACd;QAEA,mBAAmB;QACnB,MAAM,YAAY,MAAM,aAAa,cAAc;QACnD,MAAM,YAAY,MAAM,aAAa,cAAc;QAEnD,oBAAoB;QACpB,MAAM,eAAe,KAAK;QAC1B,MAAM,eAAe,KAAK;QAE1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,OAAO;gBACL,cAAc;gBACd,cAAc;gBACd,UAAU,mBAAmB,MAAM;YACrC;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}