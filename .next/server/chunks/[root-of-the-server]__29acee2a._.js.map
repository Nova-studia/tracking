{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///home/nova/apps/tracking/src/app/api/db-search/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport mongoose from 'mongoose';\n\nexport async function GET() {\n  try {\n    console.log('üîç Searching for correct database...');\n    \n    const baseUri = process.env.MONGODB_URI?.split('?')[0] || '';\n    const params = process.env.MONGODB_URI?.split('?')[1] || '';\n    \n    // List of possible database names to check\n    const databases = [\n      'test',\n      'jmtracking', \n      'contracts',\n      'production',\n      'jorge',\n      'logistics',\n      'tracking',\n      'minnesota'\n    ];\n    \n    const results = [];\n    \n    for (const dbName of databases) {\n      try {\n        const uri = `${baseUri.replace(/\\/[^\\/]*$/, '')}/${dbName}?${params}`;\n        console.log(`üîç Checking database: ${dbName}`);\n        \n        const connection = await mongoose.createConnection(uri);\n        \n        const contractSchema = new mongoose.Schema({\n          phone_number: String,\n          lot_number: String,\n          full_name: String,\n          address: String,\n          signature_data: String,\n          timestamp: Date,\n          ip_address: String\n        });\n        \n        const Contract = connection.model('Contract', contractSchema);\n        \n        const count = await Contract.countDocuments();\n        const contracts = await Contract.find({}, { lot_number: 1, full_name: 1, timestamp: 1 })\n          .sort({ timestamp: -1 })\n          .limit(10)\n          .lean();\n        \n        await connection.close();\n        \n        results.push({\n          database: dbName,\n          count,\n          contracts: contracts.map(c => ({\n            lot_number: c.lot_number,\n            full_name: c.full_name,\n            timestamp: c.timestamp\n          })),\n          hasTargetLots: contracts.some(c => \n            ['98879846', 'JDIDBFJF', '65654654'].includes(c.lot_number)\n          )\n        });\n        \n        console.log(`‚úÖ ${dbName}: ${count} contracts`);\n        \n      } catch (error) {\n        console.log(`‚ùå ${dbName}: ${error instanceof Error ? error.message : 'Error'}`);\n        results.push({\n          database: dbName,\n          error: error instanceof Error ? error.message : 'Connection failed'\n        });\n      }\n    }\n    \n    return NextResponse.json({\n      success: true,\n      searchResults: results,\n      targetLots: ['98879846', 'JDIDBFJF', '65654654']\n    });\n    \n  } catch (error) {\n    console.error('‚ùå Search failed:', error);\n    return NextResponse.json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,MAAM,UAAU,QAAQ,GAAG,CAAC,WAAW,EAAE,MAAM,IAAI,CAAC,EAAE,IAAI;QAC1D,MAAM,SAAS,QAAQ,GAAG,CAAC,WAAW,EAAE,MAAM,IAAI,CAAC,EAAE,IAAI;QAEzD,2CAA2C;QAC3C,MAAM,YAAY;YAChB;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;QAED,MAAM,UAAU,EAAE;QAElB,KAAK,MAAM,UAAU,UAAW;YAC9B,IAAI;gBACF,MAAM,MAAM,GAAG,QAAQ,OAAO,CAAC,aAAa,IAAI,CAAC,EAAE,OAAO,CAAC,EAAE,QAAQ;gBACrE,QAAQ,GAAG,CAAC,CAAC,sBAAsB,EAAE,QAAQ;gBAE7C,MAAM,aAAa,MAAM,yGAAA,CAAA,UAAQ,CAAC,gBAAgB,CAAC;gBAEnD,MAAM,iBAAiB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;oBACzC,cAAc;oBACd,YAAY;oBACZ,WAAW;oBACX,SAAS;oBACT,gBAAgB;oBAChB,WAAW;oBACX,YAAY;gBACd;gBAEA,MAAM,WAAW,WAAW,KAAK,CAAC,YAAY;gBAE9C,MAAM,QAAQ,MAAM,SAAS,cAAc;gBAC3C,MAAM,YAAY,MAAM,SAAS,IAAI,CAAC,CAAC,GAAG;oBAAE,YAAY;oBAAG,WAAW;oBAAG,WAAW;gBAAE,GACnF,IAAI,CAAC;oBAAE,WAAW,CAAC;gBAAE,GACrB,KAAK,CAAC,IACN,IAAI;gBAEP,MAAM,WAAW,KAAK;gBAEtB,QAAQ,IAAI,CAAC;oBACX,UAAU;oBACV;oBACA,WAAW,UAAU,GAAG,CAAC,CAAA,IAAK,CAAC;4BAC7B,YAAY,EAAE,UAAU;4BACxB,WAAW,EAAE,SAAS;4BACtB,WAAW,EAAE,SAAS;wBACxB,CAAC;oBACD,eAAe,UAAU,IAAI,CAAC,CAAA,IAC5B;4BAAC;4BAAY;4BAAY;yBAAW,CAAC,QAAQ,CAAC,EAAE,UAAU;gBAE9D;gBAEA,QAAQ,GAAG,CAAC,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,MAAM,UAAU,CAAC;YAE/C,EAAE,OAAO,OAAO;gBACd,QAAQ,GAAG,CAAC,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,iBAAiB,QAAQ,MAAM,OAAO,GAAG,SAAS;gBAC9E,QAAQ,IAAI,CAAC;oBACX,UAAU;oBACV,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;gBAClD;YACF;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,eAAe;YACf,YAAY;gBAAC;gBAAY;gBAAY;aAAW;QAClD;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oBAAoB;QAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}